#!/bin/bash

# Debug
# set -x

# Do Not Change these variables unless you know what you are doing
export ESC=$
export DJANGO_SECRET_KEY=$(openssl rand -hex 32)

# Default variables. These shall be overridden :-)
export DEBUG=${DEBUG:-False}
export GUNICORN_WORKERS=${GUNICORN_WORKERS:-1}
export SITE_URI=${SITE_URI}
export SITE_FQDN=$(echo $SITE_URI | sed -e "s/[^/]*\/\/\([^@]*@\)\?\([^/]*\).*/\2/")
[[ "${SITE_URI::5}" == "https" ]] && SITE_SCHEME="https" || SITE_SCHEME="http"
export SITE_SCHEME
[[ ${PUBLIC_REGISTER,,} == "false" ]] \
&& { PUBLIC_REGISTER="False"; PUBLIC_REGISTER_JS="false"; }  \
|| { PUBLIC_REGISTER="True"; PUBLIC_REGISTER_JS="true"; }
export PUBLIC_REGISTER PUBLIC_REGISTER_JS
export ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
export NOREPLY_EMAIL=${NOREPLY_EMAIL:-no-reply@example.com}
export TAIGA_DB_HOST=${TAIGA_DB_HOST:-postgres}
export TAIGA_DB_PORT=${TAIGA_DB_PORT:-5432}
export TAIGA_DB_NAME=${TAIGA_DB_NAME:-taiga}
export TAIGA_DB_USER=${TAIGA_DB_USER:-taiga}
export TAIGA_DB_PASSWORD=${TAIGA_DB_PASSWORD:-mysecretpassword}

export EMAIL_HOST=${EMAIL_HOST}
export EMAIL_HOST_USER=${EMAIL_HOST_USER}
export EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
export EMAIL_HOST_PORT=${EMAIL_HOST_PORT:-587}
export EMAIL_USE_TLS=${EMAIL_USE_TLS:-False}
export EMAIL_BACKEND=${EMAIL_BACKEND:-django.core.mail.backends.smtp.EmailBackend}

# Generate configs based on the template seeds
envsubst < /tmpl/taiga.tmpl > /etc/nginx/sites-enabled/taiga
envsubst < /tmpl/circus.ini.tmpl > $DATA/circus.ini
envsubst < /tmpl/conf.json.tmpl > $DATA/taiga-front-dist/dist/conf.json
envsubst < /tmpl/local.py.tmpl > $DATA/taiga-back/settings/local.py
envsubst < /tmpl/already_initialized.tmpl > /already_initialized
chmod +x /already_initialized

# LDAP support
#export LDAP_SERVER=${LDAP_SERVER}
export LDAP_PORT=${LDAP_PORT:-389}
export LDAP_START_TLS=${LDAP_START_TLS:-False}
#export LDAP_BIND_DN=${LDAP_BIND_DN}
#export LDAP_BIND_PASSWORD=${LDAP_BIND_PASSWORD}
#export LDAP_SEARCH_BASE=${LDAP_SEARCH_BASE}
export LDAP_USERNAME_ATTRIBUTE=${LDAP_USERNAME_ATTRIBUTE:-cn}
export LDAP_EMAIL_ATTRIBUTE=${LDAP_EMAIL_ATTRIBUTE:-mail}
export LDAP_FULL_NAME_ATTRIBUTE=${LDAP_FULL_NAME_ATTRIBUTE:-displayName}
export LDAP_SEARCH_FILTER_ADDITIONAL=${LDAP_SEARCH_FILTER_ADDITIONAL:-(mail=*)}
export LDAP_SAVE_LOGIN_PASSWORD=${LDAP_SAVE_LOGIN_PASSWORD:-True}

# Enable LDAP
if [[ -n $LDAP_SERVER && -n $LDAP_BIND_DN && -n $LDAP_BIND_PASSWORD && -n LDAP_SEARCH_BASE ]]
then
  envsubst < /tmpl/local.py.ldap >> $DATA/taiga-back/settings/local.py
  cat $DATA/taiga-front-dist/dist/conf.json | jq '. + {loginFormType: "ldap"}' -M > $DATA/taiga-front-dist/dist/conf.json
  unset LDAP_BIND_DN LDAP_BIND_PASSWORD 
fi

# Keep sensitive information out of here
unset DJANGO_SECRET_KEY TAIGA_DB_PASSWORD

# Make sure the dynamic data is writable by the circus/gunicorn
chown -Rh $USER:$GROUP $DATA/media $DATA/static $DATA/taiga-back/taiga/locale $DATA/logs

# Make sure the PostgreSQL database is up and ready
while ! timeout 1 bash -c 'cat < /dev/null > /dev/tcp/$TAIGA_DB_HOST/$TAIGA_DB_PORT' >/dev/null 2>&1; do
  echo "Waiting for $TAIGA_DB_HOST:$TAIGA_DB_PORT to be Ready ..."
  sleep 1
done
sleep 5

# This will make a tiny delay which will help to ensure the database is up and
# running before it will be seeded/updated
/already_initialized

# TODO: in case if /already_initialized fails, the bad things will happen, like the default: admin:123123 ... need to make this more robust.

# Upgrade DB schemas, etc...
# This is important when Taiga's codebase gets updated
su -s /bin/bash $USER -c 'source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
	workon venvtaiga
	cd $DATA/taiga-back
	python manage.py migrate --noinput
	/already_initialized || ( \
		python manage.py loaddata initial_user && \
		python manage.py loaddata initial_project_templates && \
		echo "First run: A new user admin with password 123123 has been created. Please change the password once you login." )
	python manage.py compilemessages
	python manage.py collectstatic --noinput

	deactivate'

# (Optional) Fill Taiga with the Sample data
# su -s /bin/sh $USER -c '. $DATA/venvtaiga/bin/activate
# cd $DATA/taiga-back
# python manage.py sample_data
# deactivate'

# Launch the backend
service nginx start
su -s /bin/sh $USER -c '/usr/local/bin/circusd "$DATA/circus.ini"'
